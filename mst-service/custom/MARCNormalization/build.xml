<!--
  * Copyright (c) 2009 University of Rochester
  *
  * This program is free software; you can redistribute it and/or modify it under the terms of the MIT/X11 license. The text of the
  * license can be found at http://www.opensource.org/licenses/mit-license.php and copy of the license can be found on the project
  * website http://www.extensiblecatalog.org/.
  *
  -->
<project name="example-service" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

  <target name="help">
    <echo>
commands

    retrieve
      You only need to worry about calling this explicitly if you are also working on the
        MST platform.  If you happen to update the mst-service-impl subproject and you wish
        to push those changes here, then you need to run an ms.publish (in the mst-platform
        dev environment) followed by this retrieve command.

    zip
        pacakges up the service for deployment into an mst.

    start2finishtest
        runs the test (StartToFinishTest.java) for this particular service.  The purpose
    of this test is to do an actual harvest and then run the service in an actual MST.

    note: also make sure you've issued the zip command on dependent services.
          eg - before you execute start2finishtest for marctoxctransformation, make
                 sure you've issued zip on marcnormalization.

    test
      runs all tests.  To limit the tests run, add the test param.
        The 2 main tests (besides the above mentioned start2finishtest) are:
            ant -Dtest=ProcessFile test
            ant -Dtest=MockHarvest test
    </echo>
  </target>

  <target name="check-copy-dev.properties">
    <available property="dev.properties.exists" file="dev.properties" />
    <antcall target="copy-dev.properties" />
  </target>

  <target name="copy-dev.properties" unless="dev.properties.exists">
    <copy file="dev.properties.example" tofile="dev.properties" />
  </target>

  <target name="touch" depends="check-copy-dev.properties">
    <touch file="dev.properties" />
  </target>

  <import file="build-custom.xml" optional="true" />
  <property file="custom.properties" />
  <property file="dev.properties" />
    <scriptdef name="normalize" language="javascript">
        <attribute name="property"/>
        <attribute name="value"/>
        project.setNewProperty(attributes.get("property"),
      attributes.get("value").toLowerCase().replaceAll(" ", "_"));
    </scriptdef>
    <normalize property="normalized.service.name" value="${service.name}"/>
  <property file="build.properties" />

  <!--
  <target name="init.default.properties" unless="dep.env">
    <property name="dep.env" value="local" />
  </target>
  -->

  <target name="echo.normalized.service.name">
    <echo>normalized.service.name: ${normalized.service.name}</echo>
  </target>

  <target name="init" depends="dev.properties.uptodate">
    <delete dir="${build.test}" />
    <mkdir dir="${build.src}" />
    <mkdir dir="${build.test.classes}" />
    <mkdir dir="${build.test.actual-output-records}" />
    <mkdir dir="${build.test.mock-harvest-actual-output}" />
    <mkdir dir="${build.classes.services}" />
    <mkdir dir="${build.lib}" />
    <mkdir dir="${build.zip.lib}" />
    <mkdir dir="${ivy.dir}" />
  </target>
  <target name="dev.properties.uptodate">
    <uptodate property="dev.properties.uptodate"
      targetfile="dev.properties" srcfile="dev.properties.example" />
    <echo>${dev.properties.uptodate}</echo>
    <antcall target="fail.dev.properties.uptodate" />
  </target>
  <target name="fail.dev.properties.uptodate" unless="dev.properties.uptodate">
    <fail>@

${service.name}
ERROR:  The file dev.properties does not exist.  If this is your first time,
  you must manually copy dev.properties.example (making the necessary
  customizations) to dev.properties.  If you've already done that, the
  purpose of this failure is to alert you that dev.properties.example
  has been updated.  Check the file and manually sync it with your
  dev.properties.  Saving dev.properties (updating the timestamp) will
  resolve this error.
    </fail>
  </target>

  <target name="check.skip.download">
    <available property="skip.download" file="${ivy.jar}" />
  </target>

  <target name="ivy.download" unless="skip.download" depends="init, check.skip.download">
    <mkdir dir="${ivy.dir}" />
    <!--  download Ivy from web site so that it can be used
        even without any special installation -->
    <echo message="Please wait this may take a few minutes - installing ivy..." />
    <delete>
      <fileset dir="${ivy.dir}" includes="*.jar"/>
    </delete>
    <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
      dest="${ivy.jar}" usetimestamp="true" />
  </target>

  <target name="ivy.init" depends="ivy.download">
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
        uri="antlib:org.apache.ivy.ant"
        classpathref="ivy.lib.path" />
  </target>

  <!--  =================================
      target: install-ivy

      this target is not necessary if you put ivy.jar in your ant lib directory
      if you already have ivy in your ant lib, you can simply remove this
      target and the dependency the 'go' target has on it
     =================================
  -->

  <target name="copy.src" depends="init">
    <copy todir="${build.src}" overwrite="true">
      <fileset dir="${src.dir}" />
    </copy>
  </target>

  <target name="javadoc" depends="compile, javadoc.nodep" />
  <target name="javadoc.nodep">
    <javadoc
        destdir="${build.doc}/api"
        doclet="com.sun.tools.doclets.formats.html.HtmlDoclet"
        classpathref="classpath.compile"
        author="true"
        version="true"
        use="true"
        windowtitle="eXtensinble Catalog - ${service.name}">

      <fileset dir="${build.src}" defaultexcludes="yes">
        <include name="**"/>
      </fileset>

      <doctitle><![CDATA[<h1>eXtensible Catalog</h1>]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2011 University of Rochester Libraries</i>]]></bottom>
      <tag name="todo" scope="all" description="To do:"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
      <link href="http://logging.apache.org/log4j/1.2/apidocs/" />
      <link href="http://www.extensiblecatalog.org/doc/MST/javadoc/mst-common/" />
    </javadoc>

  </target>

  <!-- clean the ivy cache -->
  <target name="clean-cache" depends="ivy.init"
     description="--> clean the ivy cache">
     <ivy:cleancache />
  </target>

  <path id="ivy.lib.path">
     <fileset dir="ivy" includes="*.jar" />
  </path>

  <path id="classpath.compile">
    <fileset dir="${build.lib}">
      <exclude name="mst-service*" />
      <include name="*.jar" />
    </fileset>
    <fileset dir="${build.zip.lib}">
      <include name="*.jar" />
    </fileset>
  </path>

  <path id="classpath.test.compile">
    <path refid="classpath.compile"/>
    <pathelement path="${build.classes}" />
  </path>

  <path id="classpath.test.run">
    <fileset dir="${build.lib}">
      <exclude name="mst-service*" />
      <include name="*.jar" />
    </fileset>
  </path>

  <target name="echo.path">
    <property name="classpath.test.run.str" refid="classpath.test.run" />
    <echo>classpath.test.run.str: ${classpath.test.run.str}</echo>
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <target name="clean.classes">
    <delete dir="${build.classes}" />
    <delete dir="${build.test.classes}" />
  </target>

  <target name="resolve" depends="ivy.init">
    <ivy:resolve file="ivy.xml"/>
  </target>

  <target name="ivy-report" depends="resolve">
    <mkdir dir="${build.ivy.report}" />
    <ivy:report todir="${build.ivy.report}" />
  </target>

  <target name="retrieve" depends="ivy-report">
    <ivy:retrieve sync="true" pattern="${build.lib}/[artifact]-[revision].[ext]"/>
    <copy todir="${build.zip.lib}" overwrite="true">
      <fileset dir="${build.lib}">
        <include name="mst-service-impl*.jar" />
        <!--
        add any jars you've added in your ivy-custom.xml should be included in the zip
        all the other jars are already loaded into the mst-platform
        <include name="" />
        -->
      </fileset>
    </copy>
  </target>

  <target name="compile" depends="retrieve, compile.nodep"/>
  <target name="compile.nodep" depends="init">
    <javac srcdir="${src.dir}"
      destdir="${build.classes}"
      classpathref="classpath.compile"
      debug="on"
      deprecation="on"
      debuglevel="lines,vars,source">
    </javac>
  </target>

  <target name="copy-resources" depends="copy-custom-libs, compile, copy-resources.nodep" />
  <target name="copy-resources.nodep" depends="compile.nodep">
    <copy todir="${build.classes}">
      <fileset dir="${src.java}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <copy todir="${build.zip}">
      <fileset dir=".">
        <include name="sql/**/*.sql" />
        <include name="xsl/*.xsl" />
        <include name="errors/**/*" />
      </fileset>
    </copy>
    <copy todir="${build.classes.services}">
      <fileset dir="conf">
        <include name="**/*.xml" />
        <include name="**/*.properties" />
      </fileset>
    </copy>
    <copy todir="${build.mst-instance.dir}" overwrite="true">
      <fileset dir="conf">
        <include name="**/log4j.config.txt" />
      </fileset>
    </copy>
    <copy todir="${build.classes.services}" file="custom.properties" />
    <copy tofile="${build.mst-instance.dir}/install.properties"
      file="dev.properties" overwrite="true"/>
  </target>

  <target name="jar" depends="copy-resources, jar.nodep" />

  <target name="jar.nodep" depends="copy-resources.nodep">
    <jar destfile="${build.dir}/${normalized.service.name}-${service.version}.jar"
      basedir="${build.classes}" />
  </target>

  <target name="zip" depends="jar, zip.nodep" />
  <target name="zip.nodep" depends="jar.nodep">
    <zip destfile="${build.dir}/${normalized.service.name}-${service.version}.zip">
      <zipfileset  dir="${build.zip}" prefix="${normalized.service.name}"/>
    </zip>
  </target>

  <target name="zip-dev-env">
    <zip destfile="${build.dir}/${normalized.service.name}-${service.version}-dev-env.zip">
      <zipfileset  dir="." prefix="${normalized.service.name}">
        <exclude name="build" />
        <exclude name="build/**/*" />
        <exclude name="bin" />
        <exclude name="bin/**/*" />
        <exclude name="ivy" />
        <exclude name="ivy/**/*" />
        <exclude name=".classpath" />
        <exclude name=".project" />
      </zipfileset>
    </zip>
  </target>

  <target name="compile.test" depends="copy-resources" />
  <target name="compile.test.nodep" depends="copy-resources.nodep">
    <javac srcdir="${test.java}"
      destdir="${build.test.classes}"
      classpathref="classpath.test.compile"
      debug="on"
      deprecation="on"
      debuglevel="lines,vars,source"/>
  </target>

  <target name="init.test" unless="test">
    <property name="test" value="" />
  </target>

  <target name="init.skip.mst.install" unless="skip.mst.install">
    <property name="skip.mst.install" value="" />
  </target>

  <target name="install.dependent.service" if="dependent.service">
    <echo>../${dependent.service}/build</echo>
    <unzip dest="${build.mst-services.dir}">
      <fileset dir="../${dependent.service}/build">
        <include name="*.zip"/>
      </fileset>
    </unzip>
  </target>

  <target name="install-mst" depends="jar, unzip-mst, mst-sql, install.dependent.service">
    <ant target="copy-resources" />
  </target>

  <target name="unzip-mst" depends="retrieve">
    <delete dir="${build.mst-instances.dir}" />
    <unzip src="${build.lib}/mst-instances-${mst-instances.version}.jar"
      dest="${build.dir}" />
    <ant target="init" />
    <copy todir="${build.zip.lib}" overwrite="true">
      <fileset dir="${build.lib}">
        <include name="mst-service-impl*.jar" />
        <!--
        add any jars you've added in your ivy-custom.xml should be included in the zip
        all the other jars are already loaded into the mst-platform
        <include name="" />
        -->
      </fileset>
    </copy>
  </target>

  <target name="mst-sql.test">
    <echo>mysql.home: ${mysql.home}</echo>
  </target>

  <target name="mst-sql">
    <exec executable="${mysql.home}/bin/mysql"
        input="${build.mst-instance.dir}/sql/create_database_script.sql"
        failonerror="true">
      <arg line="-u ${DatabaseUsername} --password=${DatabasePassword}" />
    </exec>
  </target>

  <target name="unzip-base-tests">
    <echo>build.test.classes: ${build.test.classes}</echo>
    <unzip dest="${build.test.classes}">
      <fileset dir="${build.zip.lib}">
        <include name="**/mst-service-impl-*.jar"/>
      </fileset>
    </unzip>
    <delete>
      <fileset dir="${build.test.classes}/xc/mst/service/impl/test">
        <exclude name="**/ProcessFilesTest.class" />
      </fileset>
      <fileset dir="${build.test.classes}/xc/mst/services/impl" />
    </delete>
  </target>

  <target name="test" depends="install-mst, compile.test, test.nodep" />
  <target name="test.nodep" depends="init.test, init.skip.mst.install, unzip-base-tests, compile.test.nodep">
    <java classpathref="classpath.test.run"
        classname="xc.mst.services.test.MetadataServiceSpecificTest"
        fork="true"
        dir="${build.dir}" >
      <env key="service.name" value="${normalized.service.name}"/>
      <env key="service.test" value="${test}"/>
      <env key="test.folder" value="${test.folder}"/>
      <env key="skip.mst.install" value="${skip.mst.install}"/>
      <env key="still.install.service" value="${still.install.service}"/>
      <jvmarg value="-Xms${test.memory}" />
      <jvmarg value="-Xmx${test.memory}" />
      <jvmarg value="-Xdebug" />
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=9001" />
      <jvmarg value="-Dcom.sun.management.jmxremote" />
      <jvmarg value="-Dcom.sun.management.jmxremote.port=9014" />
      <jvmarg value="-Dcom.sun.management.jmxremote.ssl=false" />
      <jvmarg value="-Dcom.sun.management.jmxremote.authenticate=false" />
    </java>
  </target>

  <target name="start2finishtest">
    <property name="test" value="StartToFinishTest" />
    <ant target="test" inheritAll="true" />
  </target>

  <target name="start2finishtest.nodep">
    <property name="test" value="StartToFinishTest" />
    <ant target="test.nodep" inheritAll="true" />
  </target>

</project>

